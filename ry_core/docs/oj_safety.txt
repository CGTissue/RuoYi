OJ 题段安全性检测方案

几个错误的做法
1. 不要尝试去过滤字符串，这是徒劳无功的。因为 C 语言的宏替换可以绕过任何字符串过滤。同时，字符串过滤的误伤也是很常见的。
2. 不要尝试去手工审计头文件，工作量很大，而且编译器变得无法升级维护。另外，就算没有头文件，想要调用系统函数还是有很多方法的。或者说，通过对一些头文件和库文件的修改，过滤一些低级的入侵。

几个可以尝试的方法
1. 时间限制。限制的应该是 CPU 时间，而运行的结果统计也应该是 CPU 时间。同时为了避免程序使用 Sleep 之类的函数卡进程，在实际时间超过一定范围之后要将其强制终止。
2. 内存限制。不允许程序申请特别大的内存，或者不允许程序申请内存超过题目限制。
3. 文件控制。重定向 stdio 之后，应该禁止程序对文件系统的访问。
4. 账户权限。运行子进程的时候，需要以一个权限非常低的用户账户来运行。
5. 系统调用监控。需要对程序中对系统调用的部分进行监控，包括创建进程，时间信号控制，网络访问等。
6. 编译层面控制。比如禁用内嵌 ASM，限制连接路径。
7. 小心一些 include 的特殊用法。比如 #include "/dev/random" 或 #include "/dev/tty" 之类的。
8. 使用静态编译，而不要用动态库。
9. 使用低权限账户调用编译程序。以防编译器出现 0 day 漏洞。
10. 编译器编译过程也不应该耗时或者消耗内存过多。
11. 考虑运行在虚拟机/沙箱中，快照，心跳检测等。

更高层的考虑
可以考虑自己完全实现一个沙箱，或者使用现有的沙箱工具，比如 Docker。